MXMLTMPT	  ; VEN/GPL/SMH - XPATH TEST CASES ;2013-07-29  12:10 PM
	;;2.0T1;XML PROCESSING UTILITIES;;Jul 29, 2013;Build 50
TEST	; M-Unit Entry point for Unit Testing
	S IO=$PRINCIPAL
	N DIQUIET S DIQUIET=1
	D DT^DICRW
	D:$L($T(EN^XTMUNIT)) EN^XTMUNIT($T(+0),1)
	QUIT
	;
STARTUP	; M-Unit Start-up
	QUIT
	;
SHUTDOWN	; M-Unit Stop
	QUIT
	;
SETUP	; M-Unit each Step set-up
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	K MXMLARR0,MXMLARR1,MXMLARR2
	DO INITXML0,INITXML1,INITXML2
	QUIT
	;
TEARDOWN	; M-Unit each Step Tear-down
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	K MXMLARR0,MXMLARR1,MXMLARR2
	QUIT
	;
INITXML0	; Init 1
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	D PUSH^MXMLTMP1($NA(MXMLARR0),"FIRST")
	D PUSH^MXMLTMP1($NA(MXMLARR0),"SECOND")
	D PUSH^MXMLTMP1($NA(MXMLARR0),"THIRD")
	D PUSH^MXMLTMP1($NA(MXMLARR0),"FOURTH")
	QUIT
	;
INITXML1	; Init 2
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	D PUSH^MXMLTMP1($NA(MXMLARR1),"<FIRST>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"<SECOND>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"<THIRD>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"<FOURTH>@@DATA1@@</FOURTH>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"<FIFTH>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"@@DATA2@@")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"</FIFTH>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"<SIXTH ID=""SELF"" />")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"</THIRD>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"<SECOND>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"</SECOND>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"</SECOND>")
	D PUSH^MXMLTMP1($NA(MXMLARR1),"</FIRST>")
	QUIT
INITXML2	; Init 3
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	D PUSH^MXMLTMP1($NA(MXMLARR2),"<FIRST>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"<SECOND>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"<THIRD>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"<FOURTH>DATA1</FOURTH>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"<FOURTH>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"DATA2")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"</FOURTH>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"</THIRD>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"<_SECOND>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"<FOURTH>DATA3</FOURTH>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"</_SECOND>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"</SECOND>")
	D PUSH^MXMLTMP1($NA(MXMLARR2),"</FIRST>")
	QUIT
	;
PUSH	; @TEST - Test PUSH
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	D CHKEQ^XTMUNIT(MXMLARR0(0),4,"Only 4 elements were expected.")
	D CHKEQ^XTMUNIT(MXMLARR0(MXMLARR0(0)),"FOURTH","Last pushed element should be FOURTH")
	QUIT
	;
PUSHPOP	; @TEST - Test PUSH and POP
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N %
	D POP^MXMLTMP1($NA(MXMLARR0),.%)
	D CHKEQ^XTMUNIT(%,"FOURTH","Poped element should be FOURTH")
	D CHKEQ^XTMUNIT(MXMLARR0(0),3,"Only 3 elements should be left")
	D CHKEQ^XTMUNIT(MXMLARR0(MXMLARR0(0)),"THIRD","Last pushed element should be THIRD")
	;
	N %
	D POP^MXMLTMP1($NA(MXMLARR0),.%)
	D CHKEQ^XTMUNIT(%,"THIRD","Poped element should be FOURTH")
	D CHKEQ^XTMUNIT(MXMLARR0(0),2,"Only 2 elements should be left")
	D CHKEQ^XTMUNIT(MXMLARR0(MXMLARR0(0)),"SECOND","Last pushed element should be THIRD")
	QUIT
	;
MKMDX	; @TEST - Test MKMDX
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N %
	D MKMDX^MXMLTMP1($NA(MXMLARR0),.%)
	D CHKEQ^XTMUNIT(%,"//FIRST/SECOND/THIRD/FOURTH")
	QUIT
	;
XNAME	; @TEST - Test XNAME
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	D CHKEQ^XTMUNIT($$XNAME^MXMLTMP1("<FOURTH>DATA1</FOURTH>"),"FOURTH","XNAME failed")
	D CHKEQ^XTMUNIT($$XNAME^MXMLTMP1("<SIXTH  ID=""SELF"" />"),"SIXTH","XNAME failed")
	D CHKEQ^XTMUNIT($$XNAME^MXMLTMP1("</THIRD>"),"THIRD","XNAME failed")
	QUIT
	;
XVARS	; @TEST - Test XVARS
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N GTMP,GTMP2
	D PUSH^MXMLTMP1($NA(GTMP),"<VALUE1>@@VAR1@@ and @@VAR1a@@</VALUE1>")
	D PUSH^MXMLTMP1($NA(GTMP),"<VALUE2>nothing to see here</VALUE2>")
	D PUSH^MXMLTMP1($NA(GTMP),"<VALUE3>@@VAR3@@</VALUE3>")
	D XVARS^MXMLTMPL($NA(GTMP2),$NA(GTMP))
	; ZWRITE GTMP,GTMP2
	D CHKEQ^XTMUNIT(GTMP2(1),"^VAR1^1")
	QUIT
	;
INDEX	; @TEST - Test INDEX
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	D INDEX^MXMLTMP1($NA(MXMLARR1))
	D CHKEQ^XTMUNIT(MXMLARR1("//FIRST/SECOND"),"2^12")
	D CHKEQ^XTMUNIT(MXMLARR1("//FIRST/SECOND/THIRD"),"3^9")
	D CHKEQ^XTMUNIT(MXMLARR1("//FIRST/SECOND/THIRD/FIFTH"),"5^7")
	D CHKEQ^XTMUNIT(MXMLARR1("//FIRST/SECOND/THIRD/FOURTH"),"4^4^@@DATA1@@")
	D CHKEQ^XTMUNIT(MXMLARR1("//FIRST/SECOND/THIRD/SIXTH"),"8^8^")
	D CHKEQ^XTMUNIT(MXMLARR1("//FIRST"),"1^13")
	QUIT
	;
INDEX2	; @TEST - Test INDEX ; again
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	D INDEX^MXMLTMP1($NA(MXMLARR2))
	D CHKEQ^XTMUNIT(MXMLARR2("//FIRST/SECOND"),"2^12")
	D CHKEQ^XTMUNIT(MXMLARR2("//FIRST/SECOND/_SECOND"),"9^11")
	D CHKEQ^XTMUNIT(MXMLARR2("//FIRST/SECOND/_SECOND/FOURTH"),"10^10^DATA3")
	D CHKEQ^XTMUNIT(MXMLARR2("//FIRST/SECOND/THIRD"),"3^8")
	D CHKEQ^XTMUNIT(MXMLARR2("//FIRST/SECOND/THIRD/FOURTH[1]"),"4^4^DATA1")
	D CHKEQ^XTMUNIT(MXMLARR2("//FIRST"),"1^13")
	QUIT
	;
MISSING	; @TEST - Test MISSING (@@element@@ that need to be filled out)
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	K ^TMP($J)
	D MISSING^MXMLTMPL($NA(MXMLARR1),$NA(^TMP($J,"MISSINGTEST")))
	D CHKEQ^XTMUNIT(^TMP($J,"MISSINGTEST",1),"DATA1")
	D CHKEQ^XTMUNIT(^TMP($J,"MISSINGTEST",2),"DATA2")
	K ^TMP($J)
	QUIT
	;
MAP	; @TEST - Test MAP. Maps values to missing elements.
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	K ^TMP($J)
	N MAPARY S MAPARY=$NA(^TMP($J,"MAPVALUES"))
	N OUTARY S OUTARY=$NA(^TMP($J,"MAPTEST"))
	S @MAPARY@("DATA2")="VALUE2"
	D MAP^MXMLTMPL($NA(MXMLARR1),MAPARY,OUTARY)
	; ZWRITE @OUTARY@(*)
	D CHKEQ^XTMUNIT(@OUTARY@(6),"VALUE2")
	K ^TMP($J)
	QUIT
	;
MAP2	; @TEST - Test MAP for multiple values.
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	K ^TMP($J)
	N MAPARY S MAPARY=$NA(^TMP($J,"MAPVALUES"))
	N OUTARY S OUTARY=$NA(^TMP($J,"MAPTEST"))
	S @MAPARY@("DATA1")="VALUE1"
	S @MAPARY@("DATA2")="VALUE2"
	S @MAPARY@("DATA3")="VALUE3"
	S MXMLARR1(4)="<FOURTH>@@DATA1@@ AND @@DATA3@@</FOURTH>"
	D MAP^MXMLTMPL($NA(MXMLARR1),MAPARY,OUTARY)
	; D PARY^MXMLTMPL(OUTARY)
	D CHKEQ^XTMUNIT(@OUTARY@(4),"<FOURTH>VALUE1 AND VALUE3</FOURTH>")
	K ^TMP($J)
	QUIT
	;
QUEUE	; @TEST - Test QUEUE - Adds entries to build list
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N BTLIST
	D QUEUE^MXMLTMPL($NA(BTLIST),$NA(MXMLARR1),2,3)
	D QUEUE^MXMLTMPL($NA(BTLIST),$NA(MXMLARR1),4,5)
	; ZWRITE BTLIST
	D CHKEQ^XTMUNIT($P(BTLIST(2),";",2),4)
	QUIT
	;
QUERY	; @TEST - Test XPATH-like QUERY
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N G2
	D QUERY^MXMLTMPL($NA(MXMLARR1),"//FIRST/SECOND/THIRD/FOURTH",$NA(G2))
	D CHKEQ^XTMUNIT(G2(1),"<FOURTH>@@DATA1@@</FOURTH>")
	QUIT
	;
BUILD	; @TEST - Test Build return off QUEUE[d] lists..
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N BTLIST
	D QUEUE^MXMLTMPL($NA(BTLIST),$NA(MXMLARR1),2,3)
	D QUEUE^MXMLTMPL($NA(BTLIST),$NA(MXMLARR1),4,5)
	N G3
	D BUILD^MXMLTMPL($NA(BTLIST),$NA(G3))
	;ZWRITE MXMLARR1,BTLIST,G3
	D CHKEQ^XTMUNIT(G3(4),"<FIFTH>")
	QUIT
	;
CP	; @TEST - Copy Arrays
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N G2
	D CP^MXMLTMPL($NA(MXMLARR1),$NA(G2))
	;ZWRITE G2
	D CHKEQ^XTMUNIT(G2(0),13)
	QUIT
	;
QOPEN	; @TEST - Create build list to copy all lines except last
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N GBL
	D QOPEN^MXMLTMPL($NA(GBL),$NA(MXMLARR1))
	;ZWRITE MXMLARR1
	;ZWRITE GBL
	D CHKEQ^XTMUNIT($P(GBL(1),";",3),12)
	N DEST ; destination
	D BUILD^MXMLTMPL($NA(GBL),$NA(DEST))
	;ZWRITE DEST
	D CHKEQ^XTMUNIT(DEST(DEST(0)),"</SECOND>")
	QUIT
	;
QOPEN2	; @TEST - Create partial build list to copy XPATH contents
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N GBL
	D QOPEN^MXMLTMPL($NA(GBL),$NA(MXMLARR1),"//FIRST/SECOND")
	;ZWRITE MXMLARR1,GBL
	N G2
	D BUILD^MXMLTMPL($NA(GBL),$NA(G2))
	D CHKEQ^XTMUNIT(G2(G2(0)),"</SECOND>")
	QUIT
	;
QCLOSE	; @TEST - Create build list to copy last line
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N GBL
	D QCLOSE^MXMLTMPL($NA(GBL),$NA(MXMLARR1))
	;ZWRITE MXMLARR1,GBL
	N G2
	D BUILD^MXMLTMPL($NA(GBL),$NA(G2))
	D CHKEQ^XTMUNIT(G2(G2(0)),"</FIRST>")
	QUIT
QCLOSE2	; @TEST - Create build list to copy last line based off XPATH
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N GBL,G2
	D QCLOSE^MXMLTMPL($NA(GBL),$NA(MXMLARR1),"//FIRST/SECOND/THIRD")
	;ZWRITE MXMLARR1,GBL
	D CHKEQ^XTMUNIT($P(GBL(1),";",3),13)
	D BUILD^MXMLTMPL($NA(GBL),$NA(G2))
	D CHKEQ^XTMUNIT(G2(G2(0)),"</FIRST>")
	D CHKEQ^XTMUNIT(G2(1),"</THIRD>")
	QUIT
INSERT	; @TEST - Test insertion of XML at end of XPATH
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N GBL,G2,G3,G4
	D QUERY^MXMLTMPL($NA(MXMLARR1),"//FIRST/SECOND/THIRD/FIFTH",$NA(G2))
	; ZWRITE MXMLARR1,G2
	D INSERT^MXMLTMPL($NA(MXMLARR1),$NA(G2),"//FIRST/SECOND/THIRD")
	; ZWRITE MXMLARR1
	; ZWRITE G2
	; ZWRITE:$D(G3) G3
	D INSERT^MXMLTMPL($NA(G3),$NA(G2),"//")
	D CHKEQ^XTMUNIT(G2(1),MXMLARR1(9))
	QUIT
REPLACE	; @TEST - Test REPLACE of XML
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N G2
	D QUERY^MXMLTMPL($NA(MXMLARR1),"//FIRST/SECOND/THIRD/FIFTH",$NA(G2))
	; ZWRITE MXMLARR1,G2
	D REPLACE^MXMLTMPL($NA(MXMLARR1),$NA(G2),"//FIRST/SECOND")
	; ZWRITE MXMLARR1
	D CHKEQ^XTMUNIT(MXMLARR1(2),"<FIFTH>")
	QUIT
	;
INSINNER	; @TEST - Test Insert Inner source XML into end of dest XML XPATH
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N G2
	D QUERY^MXMLTMPL($NA(MXMLARR1),"//FIRST/SECOND/THIRD",$NA(G2))
	; ZWRITE MXMLARR1,G2
	D INSINNER^MXMLTMPL($NA(MXMLARR1),$NA(G2),"//FIRST/SECOND/THIRD")
	; ZWRITE MXMLARR1
	D CHKEQ^XTMUNIT(MXMLARR1(10),"<FIFTH>")
	QUIT
INSINNE2	; @TEST - Test Insert Inner source XML into end of dest XML
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N G2
	D QUERY^MXMLTMPL($NA(MXMLARR1),"//FIRST/SECOND/THIRD",$NA(G2))
	;ZWRITE G2
	D INSINNER^MXMLTMPL($NA(G2),$NA(G2))
	;ZWRITE G2
	D CHKEQ^XTMUNIT(G2(8),"<FIFTH>")
	QUIT
PUSHA	; @TEST - Push All
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N GTMP,GTMP2
	D PUSH^MXMLTMP1($NA(GTMP),"A")
	D PUSH^MXMLTMP1($NA(GTMP2),"B")
	D PUSH^MXMLTMP1($NA(GTMP2),"C")
	D PUSHA^MXMLTMP1($NA(GTMP),$NA(GTMP2))
	; ZWRITE GTMP,GTMP2
	D CHKEQ^XTMUNIT(GTMP(3),"C")
	D CHKEQ^XTMUNIT(GTMP(0),3)
	QUIT
H2ARY	; @TEST - Convert a Hash to a return array (return(n)="key^value")
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	N GTMP,GTMP2
	S GTMP("TEST1")=1
	S GTMP("TEST2")=4
	S GTMP("TEST3")=8
	D H2ARY^MXMLTMPL($NA(GTMP2),$NA(GTMP))
	D CHKEQ^XTMUNIT(GTMP2(0),3)
	D CHKEQ^XTMUNIT(GTMP2(2),"^TEST2^4")
	; ZEXCEPT: MXMLARR0,MXMLARR1,MXMLARR2
	QUIT
